<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Shihaos]]></title>
  <link href="http://shihaos.github.io/atom.xml" rel="self"/>
  <link href="http://shihaos.github.io/"/>
  <updated>2015-08-25T12:59:57+08:00</updated>
  <id>http://shihaos.github.io/</id>
  <author>
    <name><![CDATA[shihaos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[【转】会报编译器警告的Xcode 6.3新特性：Nullability Annotations]]></title>
    <link href="http://shihaos.github.io/blog/2015/08/25/%5B(zhuan-)%5D-hui-bao-bian-yi-qi-jing-gao-de-xcode-6-dot-3xin-te-xing-:nullability-annotations/"/>
    <updated>2015-08-25T12:56:13+08:00</updated>
    <id>http://shihaos.github.io/blog/2015/08/25/[(zhuan-)]-hui-bao-bian-yi-qi-jing-gao-de-xcode-6-dot-3xin-te-xing-:nullability-annotations</id>
    <content type="html"><![CDATA[<p>最近在用Xcode 6.3写代码，一些涉及到对象的代码会报如下编译器警告：</p>

<p>Pointer is missing a nullability type specifier (<strong>nonnull or </strong>nullable)</p>

<p>于是google了一下，发现这是Xcode 6.3的一个新特性，即nullability annotations。</p>

<!--more-->


<h4>Nullability Annotations</h4>

<p>我们都知道在swift中，可以使用!和?来表示一个对象是optional的还是non-optional，如view?和view!。而在Objective-C中则没有这一区分，view即可表示这个对象是optional，也可表示是non-optioanl。这样就会造成一个问题：在Swift与Objective-C混编时，Swift编译器并不知道一个Objective-C对象到底是optional还是non-optional，因此这种情况下编译器会隐式地将Objective-C的对象当成是non-optional。</p>

<p>为了解决这个问题，苹果在Xcode 6.3引入了一个Objective-C的新特性：nullability annotations。这一新特性的核心是两个新的类型注释：<strong>nullable和</strong>nonnull。从字面上我们可以猜到，<strong>nullable表示对象可以是NULL或nil，而</strong>nonnull表示对象不应该为空。当我们不遵循这一规则时，编译器就会给出警告。</p>

<p>我们来看看以下的实例，</p>

<pre>
@interface TestNullabilityClass ()
@property (nonatomic, copy) NSArray * items;
- (id)itemWithName:(NSString * __nonnull)name;
@end
@implementation TestNullabilityClass
...
- (void)testNullability {
    [self itemWithName:nil];    // 编译器警告：Null passed to a callee that requires a non-null argument
}
- (id)itemWithName:(NSString * __nonnull)name {
    return nil;
}
@end
</pre>


<p>不过这只是一个警告，程序还是能编译通过并运行。</p>

<p>事实上，在任何可以使用const关键字的地方都可以使用<strong>nullable和</strong>nonnull，不过这两个关键字仅限于使用在指针类型上。而在方法的声明中，我们还可以使用不带下划线的nullable和nonnull，如下所示：</p>

<pre>
- (nullable id)itemWithName:(NSString * nonnull)name
</pre>


<p>在属性声明中，也增加了两个相应的特性，因此上例中的items属性可以如下声明：</p>

<pre>
@property (nonatomic, copy, nonnull) NSArray * items;
</pre>


<p>当然也可以用以下这种方式：</p>

<pre>
@property (nonatomic, copy) NSArray * __nonnull items;
</pre>


<p>推荐使用nonnull这种方式，这样可以让属性声明看起来更清晰。</p>

<h4>Nonnull区域设置(Audited Regions)</h4>

<p>如果需要每个属性或每个方法都去指定nonnull和nullable，是一件非常繁琐的事。苹果为了减轻我们的工作量，专门提供了两个宏：NS_ASSUME_NONNULL_BEGIN和NS_ASSUME_NONNULL_END。在这两个宏之间的代码，所有简单指针对象都被假定为nonnull，因此我们只需要去指定那些nullable的指针。如下代码所示：</p>

<pre>
NS_ASSUME_NONNULL_BEGIN
@interface TestNullabilityClass ()
@property (nonatomic, copy) NSArray * items;
- (id)itemWithName:(nullable NSString *)name;
@end
NS_ASSUME_NONNULL_END
</pre>


<p>在上面的代码中，items属性默认是nonnull的，itemWithName:方法的返回值也是nonnull，而参数是指定为nullable的。</p>

<p>不过，为了安全起见，苹果还制定了几条规则：</p>

<p>typedef定义的类型的nullability特性通常依赖于上下文，即使是在Audited Regions中，也不能假定它为nonnull。
复杂的指针类型(如id *)必须显示去指定是nonnull还是nullable。例如，指定一个指向nullable对象的nonnull指针，可以使用”<strong>nullable id * </strong>nonnull”。
我们经常使用的NSError **通常是被假定为一个指向nullable NSError对象的nullable指针。
兼容性</p>

<p>因为Nullability Annotations是Xcode 6.3新加入的，所以我们需要考虑之前的老代码。实际上，苹果已以帮我们处理好了这种兼容问题，我们可以安全地使用它们：</p>

<p>老代码仍然能正常工作，    即使对nonnull对象使用了nil也没有问题。
老代码在需要和swift混编时，在新的swift编译器下会给出一个警告。</p>

<p>nonnull不会影响性能。事实上，我们仍然可以在运行时去判断我们的对象是否为nil。
事实上，我们可以将nonnull/nullable与我们的断言和异常一起看待，其需要处理的问题都是同一个：违反约定是一个程序员的错误。特别是，返回值是我们可控的东西，如果返回值是nonnull的，则我们不应该返回nil，除非是为了向后兼容。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C warnings的屏蔽]]></title>
    <link href="http://shihaos.github.io/blog/2015/08/17/objective-cping-fei-qi-fang-fa-dao-zhi-de-warnings/"/>
    <updated>2015-08-17T12:37:05+08:00</updated>
    <id>http://shihaos.github.io/blog/2015/08/17/objective-cping-fei-qi-fang-fa-dao-zhi-de-warnings</id>
    <content type="html"><![CDATA[<h2>处理编译器的警告</h2>

<p>在项目不断发展需要兼容低版本，如iOS6.0以及更低版本的时候，编译出来就会有上百个warnings，究其原因就是因为有很多低版本的方法在高版本的SDK中被deprecated，所以我们需要做的只能是屏蔽warnins,添加toDo注释，等兼容最低版本提高时再替换方法；</p>

<h4>1、弃用方法的warnings屏蔽</h4>

<pre>
#pragma clang diagnostic push  
  
#pragma clang diagnostic ignored "-Wdeprecated-declarations"       
//调用废弃的方法 
#pragma clang diagnostic pop   
</pre>


<!--more-->


<h4>2、指针类型不兼容warnings屏蔽</h4>

<pre>
#pragma clang diagnostic push   
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"   
//类型不兼容的代码段 
#pragma clang diagnostic pop  
</pre>


<h4>3、尚未使用的变量或方法用unused标记</h4>

<pre>
#pragma clang diagnostic push   
#pragma clang diagnostic ignored "-Wunused-variable"   
//有未使用的变量或者方法 
#pragma clang diagnostic pop 
</pre>


<h4>4、保留环问题，不过建议最好直接修改代码</h4>

<pre>
the retain cycle.  
#pragma clang diagnostic push  
#pragma clang diagnostic ignored "-Warc-retain-cycles"  
    self.completionBlock = ^ {  
        ...  
    };  
#pragma clang diagnostic pop  
</pre>


<p>以上方法可以解决大部分现有项目因为废弃或者其他原因造成的warnings</p>

<h4>如果需要更进一步了解</h4>

<p><a href="http://clang.llvm.org/docs/UsersManual.html#diagnostics_pragmas">http://clang.llvm.org/docs/UsersManual.html#diagnostics_pragmas</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift学习 -代码之美——闭包]]></title>
    <link href="http://shihaos.github.io/blog/2015/08/15/swiftxue-xi-dai-ma-zhi-mei-bi-bao/"/>
    <updated>2015-08-15T15:21:06+08:00</updated>
    <id>http://shihaos.github.io/blog/2015/08/15/swiftxue-xi-dai-ma-zhi-mei-bi-bao</id>
    <content type="html"><![CDATA[<h2>闭包之美</h2>

<p>闭包在Swift语言中感觉充分诠释了代码的美，同时也反衬出swift语言的强大无比！</p>

<h3>本文要点</h3>

<ul>
<li>闭包表达式在函数调用中的简化</li>
<li>尾随闭包</li>
<li>闭包捕获变量和常量</li>
<li>闭包是引用类型</li>
</ul>


<!--more-->


<p></p>

<h2>闭包表达式</h2>

<p>我们先了解闭包的基本表达式，然后再用实际的例子去看下闭包表达式神奇的精简过程。</p>

<pre>
{(parameters) -> return in statements }
</pre>


<h5>闭包表达式替代函数</h5>

<p>我们先了解闭包的基本表达式，然后再用实际的例子去看下闭包表达式神奇的精简过程。</p>

<pre class=”brush: Objective-C; gutter: true;”>
var names = ["Mike", "John", "Tom", "Kitty"]

//从小到大排序
func sortFun(s1 : String, s2 : String2) -> Bool {
    return s1 < s2;
}

var sortedNames = sorted (names, sortFun);
</pre>


<p>1、由函数表达式变成闭包的标准模式：</p>

<pre>
//  第1步
var sortedNames1 = sorted(names,{(s1:String, s2:String) -> Bool in return s1 < s2})
</pre>


<p>2、省略参数类型</p>

<pre>
//  第2步
var sortedNames2 = sorted(names,{(s1, s2) -> Bool in return s1 < s2})
</pre>


<p>3、省略返回值类型</p>

<pre>
//  第3步
var sortedNames3 = sorted(names,{(s1, s2) in return s1 < s2})
</pre>


<p>4、省略返回语句</p>

<pre>
// 第4步
var sortedNames4 = sorted(names,{(s1, s2) in s1 < s2})
</pre>


<p>5、省略相同形式内容</p>

<pre>
//  第5步
var sortedNames5 = sorted(names,{$0 < $1})
</pre>


<p>6、OMG!没了！</p>

<pre>
//  第6步
var sortedNames6 = sorted(names,<)
</pre>


<h2>尾随闭包</h2>

<p>尾随闭包是指闭包作为参数放在函数的最后面，如果函数最后一个参数是闭包，在调用函数的时候，可以将闭包写在函数外面，如果函数只有一个参数，则函数后圆括号都可以省略；用上面的闭包带入函数里面；</p>

<pre>
//第1步
sorted(names, {$0 < $1})
//第2步
sorted(names){$0 < $1}
//第3步
sorted{$0 < $1}
</pre>


<h2>捕获闭包的常量和变量</h2>

<p>闭包能够在上下文中捕获常量和变量，即使常量和变量的作用域不再存在，闭包捕获的常量和变量仍然会保存最后一次使用他们的值，继续使用；</p>

<pre>
import Foundation

func makeIncrementor(forIncrement amount: Int) -> () -> Int {
    var runningTotal = 0
    func incrementor() -> Int {
        runningTotal += amount
        return runningTotal
    }
    return incrementor
}
//即使在incrementor返回后，runningTotal仍会保留最近一次使用的值
let incrementByTen = makeIncrementor(forIncrement: 10)

println(incrementByTen())
println(incrementByTen())
println(incrementByTen())
</pre>


<p>输出结果：</p>

<pre>
10
20
30
</pre>


<p>如果获得新的runningTotal值，再次调用makeIncrementor函数即可，如</p>

<pre>
let incrementByTen = makeIncrementor(forIncrement: 10)
</pre>


<h2>闭包是引用类型</h2>

<p>由于闭包有时候会很大，所以Swift语言将其设计成引用类型，引用和C语言指针差不多，多个变量或者常量引用一块内存空间；</p>

<pre>
let incrementByTen = makeIncrementor(forIncrement: 10)
var incrementByTen1 = incrementByTen //与incrementByTen指向同一个函数
var incrementByTen2 = incrementByTen
</pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[玉渊 - Hello world！]]></title>
    <link href="http://shihaos.github.io/blog/2015/08/12/hello-world/"/>
    <updated>2015-08-12T15:21:06+08:00</updated>
    <id>http://shihaos.github.io/blog/2015/08/12/hello-world</id>
    <content type="html"><![CDATA[<ul>
<li><p>Hello world!</p></li>
<li><p>我是玉渊，现在是阿里巴巴聚划算事业部的iOS开发工程师，iOS小白一枚，多多赐教！</p></li>
</ul>


<h1>个人信息</h1>

<ul>
<li><p>赵仕豪/男/1989</p></li>
<li><p>广东广州</p></li>
<li><p>本科/华南师范大学 &mdash;   计算机学院 &mdash; 2009.9 - 2013.6</p></li>
<li><p>硕士/浙江大学    &mdash; 软件学院 &mdash; 2013.9 - 2015.6</p></li>
<li><p>现在就职：阿里巴巴集团 聚划算事业部  iOS开发工程师</p></li>
<li><p>微博：<a href="http://weibo.com/qqways">@ways赵仕豪</a></p></li>
<li><p>技术博客：<a href="http://shihaos.github.io">http://shihaos.github.io</a></p></li>
<li><p>Github: <a href="http://github.com/shihaos">http://github.com/shihaos</a></p></li>
<li><p>Email: <a href="&#109;&#97;&#x69;&#x6c;&#116;&#111;&#58;&#115;&#104;&#105;&#104;&#x61;&#111;&#115;&#49;&#x32;&#x40;&#x31;&#54;&#51;&#46;&#x63;&#111;&#109;">&#115;&#104;&#105;&#x68;&#97;&#111;&#x73;&#49;&#50;&#64;&#49;&#54;&#x33;&#46;&#x63;&#x6f;&#109;</a></p></li>
</ul>


<hr />
]]></content>
  </entry>
  
</feed>
