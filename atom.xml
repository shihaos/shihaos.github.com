<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Shihaos]]></title>
  <link href="http://shihaos.github.io/atom.xml" rel="self"/>
  <link href="http://shihaos.github.io/"/>
  <updated>2015-08-15T19:30:10+08:00</updated>
  <id>http://shihaos.github.io/</id>
  <author>
    <name><![CDATA[shihaos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Swift学习 -代码之美——闭包]]></title>
    <link href="http://shihaos.github.io/blog/2015/08/15/swiftxue-xi-dai-ma-zhi-mei-bi-bao/"/>
    <updated>2015-08-15T15:21:06+08:00</updated>
    <id>http://shihaos.github.io/blog/2015/08/15/swiftxue-xi-dai-ma-zhi-mei-bi-bao</id>
    <content type="html"><![CDATA[<h2>闭包之美</h2>

<p>闭包在Swift语言中感觉充分诠释了代码的美，同时也反衬出swift语言的强大无比！</p>

<h3>本文要点</h3>

<ul>
<li>闭包表达式在函数调用中的简化</li>
<li>尾随闭包</li>
<li>闭包捕获变量和常量</li>
<li>闭包是引用类型</li>
</ul>


<!--more-->


<p></p>

<h2>闭包表达式</h2>

<p>我们先了解闭包的基本表达式，然后再用实际的例子去看下闭包表达式神奇的精简过程。</p>

<pre>
{(parameters) -> return in statements }
</pre>


<h5>闭包表达式替代函数</h5>

<p>我们先了解闭包的基本表达式，然后再用实际的例子去看下闭包表达式神奇的精简过程。</p>

<pre class=”brush: Objective-C; gutter: true;”>
var names = ["Mike", "John", "Tom", "Kitty"]

//从小到大排序
func sortFun(s1 : String, s2 : String2) -> Bool {
    return s1 < s2;
}

var sortedNames = sorted (names, sortFun);
</pre>


<p>1、由函数表达式变成闭包的标准模式：</p>

<pre>
//  第1步
var sortedNames1 = sorted(names,{(s1:String, s2:String) -> Bool in return s1 < s2})
</pre>


<p>2、省略参数类型</p>

<pre>
//  第2步
var sortedNames2 = sorted(names,{(s1, s2) -> Bool in return s1 < s2})
</pre>


<p>3、省略返回值类型</p>

<pre>
//  第3步
var sortedNames3 = sorted(names,{(s1, s2) in return s1 < s2})
</pre>


<p>4、省略返回语句</p>

<pre>
// 第4步
var sortedNames4 = sorted(names,{(s1, s2) in s1 < s2})
</pre>


<p>5、省略相同形式内容</p>

<pre>
//  第5步
var sortedNames5 = sorted(names,{$0 < $1})
</pre>


<p>6、OMG!没了！</p>

<pre>
//  第6步
var sortedNames6 = sorted(names,<)
</pre>


<h2>尾随闭包</h2>

<p>尾随闭包是指闭包作为参数放在函数的最后面，如果函数最后一个参数是闭包，在调用函数的时候，可以将闭包写在函数外面，如果函数只有一个参数，则函数后圆括号都可以省略；用上面的闭包带入函数里面；</p>

<pre>
//第1步
sorted(names, {$0 < $1})
//第2步
sorted(names){$0 < $1}
//第3步
sorted{$0 < $1}
</pre>


<h2>捕获闭包的常量和变量</h2>

<p>闭包能够在上下文中捕获常量和变量，即使常量和变量的作用域不再存在，闭包捕获的常量和变量仍然会保存最后一次使用他们的值，继续使用；</p>

<pre>
import Foundation

func makeIncrementor(forIncrement amount: Int) -> () -> Int {
    var runningTotal = 0
    func incrementor() -> Int {
        runningTotal += amount
        return runningTotal
    }
    return incrementor
}
//即使在incrementor返回后，runningTotal仍会保留最近一次使用的值
let incrementByTen = makeIncrementor(forIncrement: 10)

println(incrementByTen())
println(incrementByTen())
println(incrementByTen())
</pre>


<p>输出结果：</p>

<pre>
10
20
30
</pre>


<p>如果获得新的runningTotal值，再次调用makeIncrementor函数即可，如</p>

<pre>
let incrementByTen = makeIncrementor(forIncrement: 10)
</pre>


<h2>闭包是引用类型</h2>

<p>由于闭包有时候会很大，所以Swift语言将其设计成引用类型，引用和C语言指针差不多，多个变量或者常量引用一块内存空间；</p>

<pre>
let incrementByTen = makeIncrementor(forIncrement: 10)
var incrementByTen1 = incrementByTen //与incrementByTen指向同一个函数
var incrementByTen2 = incrementByTen
</pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[玉渊 - Hello world！]]></title>
    <link href="http://shihaos.github.io/blog/2015/08/12/hello-world/"/>
    <updated>2015-08-12T15:21:06+08:00</updated>
    <id>http://shihaos.github.io/blog/2015/08/12/hello-world</id>
    <content type="html"><![CDATA[<ul>
<li>Hello world!我是玉渊，现在是阿里巴巴聚划算事业部的iOS开发工程师，iOS小白一枚，多多赐教！</li>
</ul>


<h1>个人信息</h1>

<ul>
<li>赵仕豪/男/1989</li>
<li>本科/华南师范大学    计算机学院  2009.9 - 2013.6</li>
<li>硕士/浙江大学    软件学院  2013.9 - 2015.6</li>
<li>现在就职：阿里巴巴集团 聚划算事业部  iOS开发工程师</li>
<li>微博：<a href="http://weibo.com/qqways">@ways赵仕豪</a></li>
<li>技术博客：<a href="http://shihaos.github.io">http://shihaos.github.io</a>

<ul>
<li>Github: <a href="http://github.com/shihaos">http://github.com/shihaos</a></li>
</ul>
</li>
</ul>


<hr />
]]></content>
  </entry>
  
</feed>
